
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 18 15:01:11 COT 2019
//----------------------------------------------------

package compilador;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import java.util.Arrays;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 18 15:01:11 COT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\011\000\002\002\004\000\002\002" +
    "\010\000\002\002\010\000\002\002\007\000\002\002\007" +
    "\000\002\003\005\000\002\003\004\000\002\004\004\000" +
    "\002\004\007\000\002\005\004\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\016\000\002\007" +
    "\015\000\002\007\015\000\002\007\014\000\002\010\013" +
    "\000\002\010\012\000\002\010\012\000\002\010\011\000" +
    "\002\011\004\000\002\011\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\013\005\000\002\013\003\000\002\014\004\000\002" +
    "\014\007\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\037\003\000\002\037\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\017\006\000\002\017" +
    "\010\000\002\017\010\000\002\017\010\000\002\017\006" +
    "\000\002\020\011\000\002\020\010\000\002\042\005\000" +
    "\002\042\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\021" +
    "\011\000\002\021\011\000\002\022\011\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\003\000\002\024\003\000\002\041\005" +
    "\000\002\041\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\040\003\000\002\040\003\000" +
    "\002\033\011\000\002\034\013\000\002\035\012\000\002" +
    "\036\005\000\002\036\005\000\002\036\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\020\027\007\030\017\031\011\066\004\067" +
    "\022\070\005\071\013\001\002\000\010\007\uffe1\025\uffe1" +
    "\064\uffe1\001\002\000\010\007\uffe2\025\uffe2\064\uffe2\001" +
    "\002\000\010\027\ufff5\030\ufff5\031\ufff5\001\002\000\004" +
    "\004\u0105\001\002\000\004\006\u0104\001\002\000\004\064" +
    "\363\001\002\000\004\002\362\001\002\000\010\007\uffdf" +
    "\025\uffdf\064\uffdf\001\002\000\010\027\ufff4\030\ufff4\031" +
    "\ufff4\001\002\000\010\027\ufff6\030\ufff6\031\ufff6\001\002" +
    "\000\006\025\361\064\352\001\002\000\004\064\301\001" +
    "\002\000\016\030\017\031\011\066\004\067\022\070\005" +
    "\071\013\001\002\000\010\027\023\030\017\031\011\001" +
    "\002\000\010\007\uffe0\025\uffe0\064\uffe0\001\002\000\004" +
    "\004\025\001\002\000\010\027\ufff7\030\ufff7\031\ufff7\001" +
    "\002\000\030\033\044\035\030\037\035\042\047\046\043" +
    "\047\045\064\036\066\004\067\022\070\005\071\013\001" +
    "\002\000\004\006\270\001\002\000\042\005\uffe6\006\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\046\uffe6\047\uffe6\050\uffe6\060\uffe6" +
    "\064\uffe6\001\002\000\004\014\265\001\002\000\042\005" +
    "\uffe5\006\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\042\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\060\uffe5\064\uffe5\001\002\000\042\005\uff91\006\uff91" +
    "\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\041\uff91\042\uff91\046\uff91\047\uff91\050\uff91\060\uff91" +
    "\064\uff91\001\002\000\004\006\247\001\002\000\030\033" +
    "\044\035\030\037\035\042\047\046\043\047\045\064\036" +
    "\066\004\067\022\070\005\071\013\001\002\000\004\014" +
    "\250\001\002\000\004\016\227\001\002\000\004\006\226" +
    "\001\002\000\042\005\uffe4\006\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\060\uffe4\064\uffe4\001\002\000" +
    "\042\005\uffe3\006\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\060\uffe3\064\uffe3\001\002\000\022\005\225" +
    "\033\044\035\030\037\035\042\047\046\043\047\045\064" +
    "\036\001\002\000\004\014\210\001\002\000\004\064\036" +
    "\001\002\000\004\014\156\001\002\000\042\005\uff92\006" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\040\uff92\041\uff92\042\uff92\046\uff92\047\uff92\050\uff92\060" +
    "\uff92\064\uff92\001\002\000\004\007\051\001\002\000\036" +
    "\005\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\046\uffea\047\uffea\060\uffea" +
    "\064\uffea\001\002\000\020\033\044\035\030\037\035\042" +
    "\047\046\043\047\045\064\036\001\002\000\020\033\044" +
    "\035\053\037\035\042\047\046\043\047\045\064\036\001" +
    "\002\000\004\014\055\001\002\000\036\005\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\046\uffeb\047\uffeb\060\uffeb\064\uffeb\001\002" +
    "\000\014\053\063\054\067\062\056\063\057\064\071\001" +
    "\002\000\042\006\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\055\uffd7\001\002\000\042" +
    "\006\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\055\uffd6\001\002\000\016\017\076\020" +
    "\102\021\105\022\103\023\073\024\101\001\002\000\024" +
    "\015\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\051\uffa5\052\uffa5\001\002\000\024\015\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\051\uffa6\052" +
    "\uffa6\001\002\000\010\015\uffb0\051\uffb0\052\uffb0\001\002" +
    "\000\024\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\051\uffa4\052\uffa4\001\002\000\010\015\141" +
    "\051\142\052\143\001\002\000\024\015\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\051\uffa3\052\uffa3" +
    "\001\002\000\010\015\uffaf\051\uffaf\052\uffaf\001\002\000" +
    "\026\010\122\011\121\012\124\013\123\017\076\020\102" +
    "\021\105\022\103\023\073\024\101\001\002\000\026\010" +
    "\077\011\104\012\100\013\075\017\076\020\102\021\105" +
    "\022\103\023\073\024\101\001\002\000\010\015\uffb9\051" +
    "\uffb9\052\uffb9\001\002\000\010\062\uffaa\063\uffaa\064\uffaa" +
    "\001\002\000\010\062\056\063\057\064\120\001\002\000" +
    "\010\062\056\063\057\064\114\001\002\000\010\062\uffac" +
    "\063\uffac\064\uffac\001\002\000\010\062\056\063\057\064" +
    "\112\001\002\000\010\062\056\063\057\064\110\001\002" +
    "\000\010\062\uffa9\063\uffa9\064\uffa9\001\002\000\010\062" +
    "\uffab\063\uffab\064\uffab\001\002\000\010\062\uffa7\063\uffa7" +
    "\064\uffa7\001\002\000\010\062\056\063\057\064\106\001" +
    "\002\000\010\062\uffa8\063\uffa8\064\uffa8\001\002\000\024" +
    "\015\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024" +
    "\uff9b\051\uff9b\052\uff9b\001\002\000\024\015\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\051\uff9c\052" +
    "\uff9c\001\002\000\024\015\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\051\uff97\052\uff97\001\002\000" +
    "\024\015\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\051\uff98\052\uff98\001\002\000\024\015\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\051\uff9f" +
    "\052\uff9f\001\002\000\024\015\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\051\uffa0\052\uffa0\001\002" +
    "\000\024\015\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\051\uff93\052\uff93\001\002\000\024\015\uff94" +
    "\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\051" +
    "\uff94\052\uff94\001\002\000\010\015\uffb5\051\uffb5\052\uffb5" +
    "\001\002\000\020\010\122\011\121\012\124\013\123\015" +
    "\uffb7\051\uffb7\052\uffb7\001\002\000\020\010\077\011\104" +
    "\012\100\013\075\015\uffb8\051\uffb8\052\uffb8\001\002\000" +
    "\010\062\056\063\057\064\133\001\002\000\010\062\056" +
    "\063\057\064\131\001\002\000\010\062\056\063\057\064" +
    "\127\001\002\000\010\062\056\063\057\064\125\001\002" +
    "\000\024\015\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\051\uff99\052\uff99\001\002\000\024\015\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\051" +
    "\uff9a\052\uff9a\001\002\000\024\015\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\051\uff95\052\uff95\001" +
    "\002\000\024\015\uff96\017\uff96\020\uff96\021\uff96\022\uff96" +
    "\023\uff96\024\uff96\051\uff96\052\uff96\001\002\000\024\015" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\051\uffa1\052\uffa1\001\002\000\024\015\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\051\uffa2\052\uffa2" +
    "\001\002\000\024\015\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\051\uff9d\052\uff9d\001\002\000\024" +
    "\015\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\051\uff9e\052\uff9e\001\002\000\010\062\056\063\057" +
    "\064\140\001\002\000\010\015\uffb3\051\uffb3\052\uffb3\001" +
    "\002\000\012\010\122\011\121\012\124\013\123\001\002" +
    "\000\020\010\077\011\104\012\100\013\075\015\uffb6\051" +
    "\uffb6\052\uffb6\001\002\000\006\006\147\007\146\001\002" +
    "\000\014\053\063\054\067\062\056\063\057\064\071\001" +
    "\002\000\014\053\063\054\067\062\056\063\057\064\071" +
    "\001\002\000\010\015\uffba\051\uffba\052\uffba\001\002\000" +
    "\010\015\uffbb\051\uffbb\052\uffbb\001\002\000\020\033\044" +
    "\035\030\037\035\042\047\046\043\047\045\064\036\001" +
    "\002\000\042\005\uff8e\006\uff8e\032\uff8e\033\uff8e\034\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\060\uff8e\064\uff8e\001\002\000\022" +
    "\033\044\035\030\036\151\037\035\042\047\046\043\047" +
    "\045\064\036\001\002\000\042\005\uffbc\006\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\046\uffbc\047\uffbc\050\uffbc\060\uffbc\064\uffbc" +
    "\001\002\000\010\062\056\063\057\064\155\001\002\000" +
    "\010\015\uffb1\051\uffb1\052\uffb1\001\002\000\020\010\122" +
    "\011\121\012\124\013\123\015\uffb2\051\uffb2\052\uffb2\001" +
    "\002\000\020\010\077\011\104\012\100\013\075\015\uffb4" +
    "\051\uffb4\052\uffb4\001\002\000\004\064\157\001\002\000" +
    "\004\014\160\001\002\000\020\015\166\053\161\054\162" +
    "\062\056\063\057\064\164\065\165\001\002\000\006\015" +
    "\uffc1\055\uffc1\001\002\000\006\015\uffc0\055\uffc0\001\002" +
    "\000\006\015\uffc3\055\uffc3\001\002\000\006\015\uffc2\055" +
    "\uffc2\001\002\000\006\015\uffbf\055\uffbf\001\002\000\004" +
    "\015\175\001\002\000\006\015\uffc4\055\uffc4\001\002\000" +
    "\006\015\172\055\171\001\002\000\016\053\161\054\162" +
    "\062\056\063\057\064\164\065\165\001\002\000\004\015" +
    "\173\001\002\000\006\006\uffc7\050\uffc7\001\002\000\006" +
    "\015\uffc5\055\uffc5\001\002\000\006\006\uffc6\050\uffc6\001" +
    "\002\000\004\050\177\001\002\000\006\062\201\064\200" +
    "\001\002\000\004\007\205\001\002\000\004\007\202\001" +
    "\002\000\020\033\044\035\030\037\035\042\047\046\043" +
    "\047\045\064\036\001\002\000\022\033\044\034\204\035" +
    "\030\037\035\042\047\046\043\047\045\064\036\001\002" +
    "\000\042\005\uffbe\006\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\060\uffbe\064\uffbe\001\002\000\020\033" +
    "\044\035\030\037\035\042\047\046\043\047\045\064\036" +
    "\001\002\000\022\033\044\034\207\035\030\037\035\042" +
    "\047\046\043\047\045\064\036\001\002\000\042\005\uffbd" +
    "\006\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\060\uffbd\064\uffbd\001\002\000\006\064\211\065\212\001" +
    "\002\000\006\015\220\055\217\001\002\000\006\015\214" +
    "\055\213\001\002\000\004\064\215\001\002\000\004\006" +
    "\uffcc\001\002\000\004\015\216\001\002\000\004\006\uffcb" +
    "\001\002\000\006\064\221\065\222\001\002\000\004\006" +
    "\uffc8\001\002\000\004\015\224\001\002\000\004\015\223" +
    "\001\002\000\004\006\uffca\001\002\000\004\006\uffc9\001" +
    "\002\000\004\002\ufffd\001\002\000\042\005\uffe9\006\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\046\uffe9\047\uffe9\050\uffe9\060\uffe9" +
    "\064\uffe9\001\002\000\036\014\237\033\044\035\030\037" +
    "\035\042\047\046\043\047\045\053\231\054\236\056\233" +
    "\062\056\063\057\064\234\065\241\001\002\000\006\006" +
    "\uffd4\050\uffd4\001\002\000\006\006\uffd2\050\uffd2\001\002" +
    "\000\006\006\uffce\050\uffce\001\002\000\006\006\uffcd\050" +
    "\uffcd\001\002\000\010\006\uffd5\016\227\050\uffd5\001\002" +
    "\000\006\006\uffd0\050\uffd0\001\002\000\006\006\uffd1\050" +
    "\uffd1\001\002\000\010\062\056\063\057\064\244\001\002" +
    "\000\006\006\uffd3\050\uffd3\001\002\000\006\006\uffcf\050" +
    "\uffcf\001\002\000\004\015\246\001\002\000\014\010\122" +
    "\011\121\012\124\013\123\015\245\001\002\000\012\010" +
    "\077\011\104\012\100\013\075\001\002\000\006\006\uffae" +
    "\050\uffae\001\002\000\006\006\uffad\050\uffad\001\002\000" +
    "\042\005\uffe7\006\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\060\uffe7\064\uffe7\001\002\000\014\053\063" +
    "\054\067\062\056\063\057\064\071\001\002\000\010\015" +
    "\252\051\142\052\143\001\002\000\004\007\253\001\002" +
    "\000\020\033\044\035\030\037\035\042\047\046\043\047" +
    "\045\064\036\001\002\000\024\033\044\035\030\037\035" +
    "\040\255\041\256\042\047\046\043\047\045\064\036\001" +
    "\002\000\020\033\044\035\030\037\035\042\047\046\043" +
    "\047\045\064\036\001\002\000\042\005\uff90\006\uff90\032" +
    "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\046\uff90\047\uff90\050\uff90\060\uff90\064" +
    "\uff90\001\002\000\022\033\044\035\030\037\035\041\260" +
    "\042\047\046\043\047\045\064\036\001\002\000\042\005" +
    "\uff8f\006\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\040\uff8f\041\uff8f\042\uff8f\046\uff8f\047\uff8f\050" +
    "\uff8f\060\uff8f\064\uff8f\001\002\000\022\005\264\033\044" +
    "\035\030\037\035\042\047\046\043\047\045\064\036\001" +
    "\002\000\004\006\263\001\002\000\034\030\ufffb\031\ufffb" +
    "\033\ufffb\035\ufffb\037\ufffb\042\ufffb\046\ufffb\047\ufffb\064" +
    "\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\001\002\000\004" +
    "\002\ufffe\001\002\000\014\053\063\054\067\062\056\063" +
    "\057\064\071\001\002\000\010\015\267\051\142\052\143" +
    "\001\002\000\004\007\146\001\002\000\042\005\uffe8\006" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\046\uffe8\047\uffe8\050\uffe8\060" +
    "\uffe8\064\uffe8\001\002\000\010\027\272\030\017\031\011" +
    "\001\002\000\004\004\273\001\002\000\030\033\044\035" +
    "\030\037\035\042\047\046\043\047\045\064\036\066\004" +
    "\067\022\070\005\071\013\001\002\000\030\033\044\035" +
    "\030\037\035\042\047\046\043\047\045\064\036\066\004" +
    "\067\022\070\005\071\013\001\002\000\022\005\276\033" +
    "\044\035\030\037\035\042\047\046\043\047\045\064\036" +
    "\001\002\000\004\002\uffff\001\002\000\022\005\300\033" +
    "\044\035\030\037\035\042\047\046\043\047\045\064\036" +
    "\001\002\000\004\002\001\001\002\000\004\014\302\001" +
    "\002\000\012\015\306\043\305\044\304\045\310\001\002" +
    "\000\012\066\004\067\022\070\005\071\013\001\002\000" +
    "\012\066\uffd9\067\uffd9\070\uffd9\071\uffd9\001\002\000\012" +
    "\066\uffda\067\uffda\070\uffda\071\uffda\001\002\000\004\057" +
    "\336\001\002\000\006\015\313\055\312\001\002\000\012" +
    "\066\uffd8\067\uffd8\070\uffd8\071\uffd8\001\002\000\006\015" +
    "\uffdd\055\uffdd\001\002\000\010\043\305\044\304\045\310" +
    "\001\002\000\004\057\314\001\002\000\012\066\004\067" +
    "\022\070\005\071\013\001\002\000\004\007\316\001\002" +
    "\000\030\033\044\035\030\037\035\042\047\046\043\047" +
    "\045\064\036\066\004\067\022\070\005\071\013\001\002" +
    "\000\030\033\044\035\030\037\035\042\047\046\043\047" +
    "\045\064\036\066\004\067\022\070\005\071\013\001\002" +
    "\000\022\032\321\033\044\035\030\037\035\042\047\046" +
    "\043\047\045\064\036\001\002\000\012\062\056\063\057" +
    "\064\324\065\326\001\002\000\004\061\323\001\002\000" +
    "\010\027\ufff2\030\ufff2\031\ufff2\001\002\000\004\006\331" +
    "\001\002\000\004\006\330\001\002\000\004\006\327\001" +
    "\002\000\004\061\uff8b\001\002\000\004\061\uff8c\001\002" +
    "\000\004\061\uff8d\001\002\000\022\032\321\033\044\035" +
    "\030\037\035\042\047\046\043\047\045\064\036\001\002" +
    "\000\004\061\334\001\002\000\010\027\ufff3\030\ufff3\031" +
    "\ufff3\001\002\000\006\015\uffde\055\uffde\001\002\000\012" +
    "\066\004\067\022\070\005\071\013\001\002\000\004\007" +
    "\340\001\002\000\030\033\044\035\030\037\035\042\047" +
    "\046\043\047\045\064\036\066\004\067\022\070\005\071" +
    "\013\001\002\000\030\033\044\035\030\037\035\042\047" +
    "\046\043\047\045\064\036\066\004\067\022\070\005\071" +
    "\013\001\002\000\022\032\321\033\044\035\030\037\035" +
    "\042\047\046\043\047\045\064\036\001\002\000\004\061" +
    "\344\001\002\000\010\027\ufff0\030\ufff0\031\ufff0\001\002" +
    "\000\022\032\321\033\044\035\030\037\035\042\047\046" +
    "\043\047\045\064\036\001\002\000\004\061\347\001\002" +
    "\000\010\027\ufff1\030\ufff1\031\ufff1\001\002\000\006\015" +
    "\uffdc\055\uffdc\001\002\000\006\025\353\064\352\001\002" +
    "\000\010\006\ufff9\015\ufff9\055\ufff9\001\002\000\006\026" +
    "\355\062\354\001\002\000\004\026\357\001\002\000\004" +
    "\064\356\001\002\000\006\015\uffdb\055\uffdb\001\002\000" +
    "\004\064\360\001\002\000\010\006\ufff8\015\ufff8\055\ufff8" +
    "\001\002\000\004\062\354\001\002\000\004\002\000\001" +
    "\002\000\004\014\364\001\002\000\012\015\365\043\305" +
    "\044\304\045\310\001\002\000\004\007\376\001\002\000" +
    "\006\015\367\055\312\001\002\000\004\007\370\001\002" +
    "\000\030\033\044\035\030\037\035\042\047\046\043\047" +
    "\045\064\036\066\004\067\022\070\005\071\013\001\002" +
    "\000\030\033\044\035\030\037\035\042\047\046\043\047" +
    "\045\064\036\066\004\067\022\070\005\071\013\001\002" +
    "\000\022\033\044\035\030\037\035\042\047\046\043\047" +
    "\045\060\373\064\036\001\002\000\010\027\uffee\030\uffee" +
    "\031\uffee\001\002\000\022\033\044\035\030\037\035\042" +
    "\047\046\043\047\045\060\375\064\036\001\002\000\010" +
    "\027\uffef\030\uffef\031\uffef\001\002\000\030\033\044\035" +
    "\030\037\035\042\047\046\043\047\045\064\036\066\004" +
    "\067\022\070\005\071\013\001\002\000\030\033\044\035" +
    "\030\037\035\042\047\046\043\047\045\064\036\066\004" +
    "\067\022\070\005\071\013\001\002\000\022\033\044\035" +
    "\030\037\035\042\047\046\043\047\045\060\u0101\064\036" +
    "\001\002\000\010\027\uffec\030\uffec\031\uffec\001\002\000" +
    "\022\033\044\035\030\037\035\042\047\046\043\047\045" +
    "\060\u0103\064\036\001\002\000\010\027\uffed\030\uffed\031" +
    "\uffed\001\002\000\034\030\ufffa\031\ufffa\033\ufffa\035\ufffa" +
    "\037\ufffa\042\ufffa\046\ufffa\047\ufffa\064\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\001\002\000\012\066\004\067\022" +
    "\070\005\071\013\001\002\000\030\033\044\035\030\037" +
    "\035\042\047\046\043\047\045\064\036\066\004\067\022" +
    "\070\005\071\013\001\002\000\022\005\u0108\033\044\035" +
    "\030\037\035\042\047\046\043\047\045\064\036\001\002" +
    "\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\022\002\011\003\017\004\007\005\020\006" +
    "\014\007\005\010\013\044\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\261\005\270\006\014" +
    "\007\005\010\013\044\015\001\001\000\010\006\023\007" +
    "\005\010\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\033\004\007\011\041\012" +
    "\047\016\036\017\025\020\032\021\026\022\030\033\045" +
    "\034\031\035\040\040\037\044\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\261\011" +
    "\260\012\047\016\036\017\025\020\032\021\026\022\030" +
    "\033\045\034\031\035\040\040\037\044\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\012\053\016\036\017" +
    "\025\020\032\021\026\022\030\033\045\034\031\035\040" +
    "\040\037\001\001\000\002\001\001\000\004\016\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\051\012\047\016\036\017" +
    "\025\020\032\021\026\022\030\033\045\034\031\035\040" +
    "\040\037\001\001\000\026\012\053\016\036\017\025\020" +
    "\032\021\026\022\030\033\045\034\031\035\040\040\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\064\024\071\026\057\027\061\030\060\031\063\032\065" +
    "\037\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\134\001\001" +
    "\000\004\025\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\115\027\061\030\060\031\063\032\065" +
    "\037\116\001\001\000\004\037\114\001\001\000\002\001" +
    "\001\000\004\037\112\001\001\000\004\037\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\133\001\001\000\004\037\131\001\001" +
    "\000\004\037\127\001\001\000\004\037\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\026\135\027\061\030\060" +
    "\031\063\032\065\037\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\024\144\026\057\027\061\030\060\031\063\032\065\037" +
    "\067\001\001\000\020\024\143\026\057\027\061\030\060" +
    "\031\063\032\065\037\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\011\147\012\047\016\036\017\025" +
    "\020\032\021\026\022\030\033\045\034\031\035\040\040" +
    "\037\001\001\000\002\001\001\000\026\012\053\016\036" +
    "\017\025\020\032\021\026\022\030\033\045\034\031\035" +
    "\040\040\037\001\001\000\002\001\001\000\016\026\152" +
    "\027\061\030\060\031\063\032\065\037\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\037\162\042\167\043" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\162" +
    "\043\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\011" +
    "\202\012\047\016\036\017\025\020\032\021\026\022\030" +
    "\033\045\034\031\035\040\040\037\001\001\000\026\012" +
    "\053\016\036\017\025\020\032\021\026\022\030\033\045" +
    "\034\031\035\040\040\037\001\001\000\002\001\001\000" +
    "\030\011\205\012\047\016\036\017\025\020\032\021\026" +
    "\022\030\033\045\034\031\035\040\040\037\001\001\000" +
    "\026\012\053\016\036\017\025\020\032\021\026\022\030" +
    "\033\045\034\031\035\040\040\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\012\237" +
    "\016\036\017\025\020\231\021\026\022\030\033\045\034" +
    "\031\035\040\037\227\040\037\041\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\026\241\027\061\030\060\031\063\032\065\037" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\023\250" +
    "\024\071\026\057\027\061\030\060\031\063\032\065\037" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\011\253\012\047\016\036\017\025\020\032\021\026\022" +
    "\030\033\045\034\031\035\040\040\037\001\001\000\026" +
    "\012\053\016\036\017\025\020\032\021\026\022\030\033" +
    "\045\034\031\035\040\040\037\001\001\000\030\011\256" +
    "\012\047\016\036\017\025\020\032\021\026\022\030\033" +
    "\045\034\031\035\040\040\037\001\001\000\002\001\001" +
    "\000\026\012\053\016\036\017\025\020\032\021\026\022" +
    "\030\033\045\034\031\035\040\040\037\001\001\000\002" +
    "\001\001\000\026\012\053\016\036\017\025\020\032\021" +
    "\026\022\030\033\045\034\031\035\040\040\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\023\265\024\071\026\057\027\061\030\060\031\063" +
    "\032\065\037\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\023\007\005\010\013" +
    "\001\001\000\002\001\001\000\036\003\273\004\007\011" +
    "\274\012\047\016\036\017\025\020\032\021\026\022\030" +
    "\033\045\034\031\035\040\040\037\044\015\001\001\000" +
    "\034\004\261\011\276\012\047\016\036\017\025\020\032" +
    "\021\026\022\030\033\045\034\031\035\040\040\037\044" +
    "\015\001\001\000\026\012\053\016\036\017\025\020\032" +
    "\021\026\022\030\033\045\034\031\035\040\040\037\001" +
    "\001\000\002\001\001\000\026\012\053\016\036\017\025" +
    "\020\032\021\026\022\030\033\045\034\031\035\040\040" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\306\014\310\015\302\001\001\000\006\004\347\044" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\334\015\302\001\001\000\002\001\001" +
    "\000\004\044\314\001\001\000\002\001\001\000\036\003" +
    "\316\004\007\011\317\012\047\016\036\017\025\020\032" +
    "\021\026\022\030\033\045\034\031\035\040\040\037\044" +
    "\015\001\001\000\034\004\261\011\331\012\047\016\036" +
    "\017\025\020\032\021\026\022\030\033\045\034\031\035" +
    "\040\040\037\044\015\001\001\000\030\012\053\016\036" +
    "\017\025\020\032\021\026\022\030\033\045\034\031\035" +
    "\040\036\321\040\037\001\001\000\004\037\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\012\053\016\036\017" +
    "\025\020\032\021\026\022\030\033\045\034\031\035\040" +
    "\036\332\040\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\336\001\001\000\002" +
    "\001\001\000\036\003\340\004\007\011\341\012\047\016" +
    "\036\017\025\020\032\021\026\022\030\033\045\034\031" +
    "\035\040\040\037\044\015\001\001\000\034\004\261\011" +
    "\344\012\047\016\036\017\025\020\032\021\026\022\030" +
    "\033\045\034\031\035\040\040\037\044\015\001\001\000" +
    "\030\012\053\016\036\017\025\020\032\021\026\022\030" +
    "\033\045\034\031\035\040\036\342\040\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\012\053\016\036" +
    "\017\025\020\032\021\026\022\030\033\045\034\031\035" +
    "\040\036\345\040\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\365\014\310\015\302\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\370\004\007" +
    "\011\371\012\047\016\036\017\025\020\032\021\026\022" +
    "\030\033\045\034\031\035\040\040\037\044\015\001\001" +
    "\000\034\004\261\011\373\012\047\016\036\017\025\020" +
    "\032\021\026\022\030\033\045\034\031\035\040\040\037" +
    "\044\015\001\001\000\026\012\053\016\036\017\025\020" +
    "\032\021\026\022\030\033\045\034\031\035\040\040\037" +
    "\001\001\000\002\001\001\000\026\012\053\016\036\017" +
    "\025\020\032\021\026\022\030\033\045\034\031\035\040" +
    "\040\037\001\001\000\002\001\001\000\036\003\376\004" +
    "\007\011\377\012\047\016\036\017\025\020\032\021\026" +
    "\022\030\033\045\034\031\035\040\040\037\044\015\001" +
    "\001\000\034\004\261\011\u0101\012\047\016\036\017\025" +
    "\020\032\021\026\022\030\033\045\034\031\035\040\040" +
    "\037\044\015\001\001\000\026\012\053\016\036\017\025" +
    "\020\032\021\026\022\030\033\045\034\031\035\040\040" +
    "\037\001\001\000\002\001\001\000\026\012\053\016\036" +
    "\017\025\020\032\021\026\022\030\033\045\034\031\035" +
    "\040\040\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\u0105\004\007\044\015\001\001\000\034\004" +
    "\261\011\u0106\012\047\016\036\017\025\020\032\021\026" +
    "\022\030\033\045\034\031\035\040\040\037\044\015\001" +
    "\001\000\026\012\053\016\036\017\025\020\032\021\026" +
    "\022\030\033\045\034\031\035\040\040\037\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    int cont=0;
    public parser(java_cup.runtime.Scanner s, String nombrePrograma) throws IOException {
        super(s);

        Programa = "/home/jitzo/Documentos/GitHub/Analisis/Ejecucion/src/ejecucion/"+nombrePrograma+".java";
        archivoPrograma = new File(Programa);

        this.bw = new BufferedWriter(new FileWriter(archivoPrograma));
        bw.write("package ejecucion;\n\nimport java.util.LinkedList;\n\npublic class " + nombrePrograma + "{\n\n");
        bw.write("LinkedList<String> instrucciones = new LinkedList();\nLinkedList<String> resultadoConsola = new LinkedList();\n\n");
        //bw.write("public void main(){");
    }

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. 
    */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. 
        */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" en la línea "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", columna "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        JOptionPane.showMessageDialog(null, m, "Error de sintaxis", JOptionPane.ERROR_MESSAGE);
        System.out.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }

    String Programa;
    File archivoPrograma;
    BufferedWriter bw;
    boolean ejecutar = false;
    
    public void CerrarArchivo() throws IOException{
        bw.close();
    }

    //Bandera para saber si el algoritmo está bien escrito
    boolean bienEscrito = false;

    /*Método que indica si el algoritmo fué bien escrito*/
    public void FinAlgoritmo(Object vs, Object s, Object vs2, Object o) throws IOException {
        if (bienEscrito) {
            JOptionPane.showMessageDialog(null, "Algoritmo bien escrito");
            if(vs != null){
                TraducirVariables(String.valueOf(vs),true);
            }
            if(s != null){
                TraducirSubprograma(String.valueOf(s));
            }
            bw.write("LinkedList<String> resultadoConsola = new LinkedList(); LinkedList<String> instrucciones = new LinkedList();");
            //bw.write("public void main(){\n");
            if(vs2 != null){
                TraducirVariables(String.valueOf(vs2),false);
            }
            if(o != null){
                TraducirSubprograma(String.valueOf(o));
            }  
            bw.write("}");//Cierra la main
            bw.write("}");//Cierra la clase
            ejecutar = true;
            CerrarArchivo();
        } else {
            report_error("Algoritmo mal escrito", null);
            System.exit(1);
        }
    }

    /*Método para traducir subprogramas*/
    private void TraducirSubprograma(String s) throws IOException {
        String[] sp = s.split(" ");
        int n = -1;
        for (int i = 0; i < sp.length; i++) {
            if ((sp[i].endsWith("int") || sp[i].endsWith("boolean") || sp[i].endsWith("float") || sp[i].endsWith("String"))
                    && !sp[i].contains("(")) {
                if (!sp[i + 1].contains("(") && !sp[i + 1].endsWith("int") && !sp[i + 1].endsWith("boolean") && !sp[i + 1].endsWith("float") && !sp[i + 1].endsWith("String")) {
                    sp[i + 1] = sp[i + 1] + ";";
                }
            }
            if (sp[i].contains("[")) {
                n = i + 1;
                TraducirVariables(sp[i] + " " + sp[i + 1], false);
            } else {
                if (i != n) {
                    bw.write(" " + sp[i]);
                }
            }

        }
    }

    /*Método para traducir variables*/
    private void TraducirVariables(String v, boolean b) throws IOException {
        String[] vars = v.split(" ");
        String st = "";
        if (b) {
            st = "static ";
        }
        for (int i = 0; i < vars.length; i += 2) {
            if (vars[i].contains("[")) {
                String[] aux = vars[i].split("\\[");
                String n = aux[1].substring(0, aux[1].length() - 1);
                if (!n.equals("")) {
                    switch (aux[0]) {
                        case "int":
                            bw.write(st+"int[] " + vars[i + 1] + "= new int[" + n + "];\n");
                            break;
                        case "float":
                            bw.write(st+"float[] " + vars[i + 1] + "= new float[" + n + "];\n");
                            break;
                        case "boolean":
                            bw.write(st+"boolean[] " + vars[i + 1] + "= new boolean[" + n + "];\n");
                            break;
                        case "String":
                            bw.write(st+"String[] " + vars[i + 1] + "= new String[" + n + "];\n");
                            break;
                    }
                } else {
                    bw.write(v);
                }
            } else {
                bw.write(st + vars[i] + " " + vars[i + 1] + ";\n");
            }
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // retorne ::= RETURN MENSAJE SEMI 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String str = String.valueOf(m); 
               char comilla = 34;
               RESULT = r+" "+comilla +str.substring(1,str.length()-1)+comilla;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorne",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // retorne ::= RETURN numero SEMI 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = r+" "+n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorne",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // retorne ::= RETURN ID SEMI 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = r+" "+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorne",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // repita ::= REPEAT DOSP operaciones WHILE PARENIZQ condiciones PARENDER SEMI 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "do{ "+o+" }while( "+c+" );"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repita",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sino ::= IF PARENIZQ condiciones PARENDER DOSP operaciones ELSE operaciones ENDIF 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT="if( "+c+" ){ "+op1+" }else{ "+op2+" }"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // si ::= IF PARENIZQ condiciones PARENDER DOSP operaciones ENDIF 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT="if( "+c+" ){ "+o+" }"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // control ::= sino 
            {
              Object RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sn; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // control ::= si 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // division ::= ID DIVIDE ID 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i1+" / "+i2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("division",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // division ::= ID DIVIDE numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i+" / "+n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("division",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // division ::= numero DIVIDE ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= n+" / "+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("division",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // division ::= numero DIVIDE numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= n1+" / "+n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("division",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // multiplicacion ::= ID MULTI ID 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i1+" * "+i2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // multiplicacion ::= ID MULTI numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i+" * "+n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // multiplicacion ::= numero MULTI ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= n+" * "+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // multiplicacion ::= numero MULTI numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= n1+" * "+n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // resta ::= ID RESTA ID 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i1+" - "+i2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resta",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // resta ::= ID RESTA numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i+" - "+n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resta",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // resta ::= numero RESTA ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= n+" - "+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resta",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // resta ::= numero RESTA numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= n1+" - "+n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resta",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // suma ::= ID SUMA ID 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i1+" + "+i2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suma",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // suma ::= ID SUMA numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i+" + "+n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suma",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // suma ::= numero SUMA ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= n+" + "+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suma",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // suma ::= numero SUMA numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= n1+" + "+n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suma",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opmath ::= division 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmath",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // opmath ::= multiplicacion 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmath",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opmath ::= resta 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmath",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opmath ::= suma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmath",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // oprel ::= IGUAL 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oprel",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // oprel ::= DIFERENTE 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oprel",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // oprel ::= MAYORIGUAL 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oprel",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // oprel ::= MENORIGUAL 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oprel",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // oprel ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oprel",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // oprel ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oprel",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= PARENIZQ opmath PARENDER 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+o+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= PARENIZQ numero PARENDER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+n+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicion ::= FALSE 
            {
              Object RESULT =null;
		 RESULT="false"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicion ::= TRUE 
            {
              Object RESULT =null;
		 RESULT="true"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicion ::= opmath oprel opmath 
            {
              Object RESULT =null;
		int om1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int om1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object om1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int om2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int om2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object om2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = om1+" "+o+" "+om2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicion ::= opmath oprel numero 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = om+" "+o+" "+n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicion ::= numero oprel opmath 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n+" "+o+" "+om; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicion ::= opmath oprel ID 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = om+" "+o+" "+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicion ::= ID oprel opmath 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i+" "+o+" "+om; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicion ::= numero oprel ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n+" "+o+" "+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicion ::= ID oprel numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i+" "+o+" "+n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion ::= ID oprel ID 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i1+" "+o+" "+i2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condiciones ::= condicion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condiciones",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condiciones ::= condiciones OR condicion 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= cs+" || "+c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condiciones",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condiciones ::= condiciones AND condicion 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= cs+" && "+c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condiciones",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mientras ::= WHILE PARENIZQ condiciones PARENDER DOSP operaciones ENDWHILE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "while( "+c+" ){"+o+" }"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // para ::= FOR asignacion TO ID DOSP operaciones ENDFOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            String[] var = String.valueOf(a).split("=");
            System.out.println(var[1]);
            String[] val = var[1].split(";");
            char comilla = 34;
            RESULT = "for( "+var[0].trim()+"="+val[0].trim()+" ; "+var[0].trim()+" <= "+i+" ; "+var[0].trim()+" ++){ instrucciones.add("+comilla+"for "+var[0].trim()+"<-"+val[0].trim()+" to "+i+":"+comilla+");"+o+" }instrucciones.add("+comilla+"for "+var[0].trim()+"<-"+val[0].trim()+" to "+i+":"+comilla+");instrucciones.add("+comilla+"endfor"+comilla+");"; 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // para ::= FOR asignacion TO NUM DOSP operaciones ENDFOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            String[] var = String.valueOf(a).split("=");
            System.out.println(var[1]);
            String[] val = var[1].split(";");
            char comilla = 34;
            RESULT = "for( "+var[0].trim()+"="+val[0].trim()+" ; "+var[0].trim()+" <= "+n+" ; "+var[0].trim()+" ++){ instrucciones.add("+comilla+"for "+var[0].trim()+"<-"+val[0].trim()+" to "+n+":"+comilla+");"+o+" }"; 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paramllame ::= MENSAJE 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 char comilla = 34;  RESULT= m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramllame",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramllame ::= FALSE 
            {
              Object RESULT =null;
		 RESULT="false"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramllame",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramllame ::= TRUE 
            {
              Object RESULT =null;
		 RESULT="true"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramllame",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramllame ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramllame",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paramllame ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramllame",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramsllame ::= paramllame 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsllame",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paramsllame ::= paramsllame COMA paramllame 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ps+", "+p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsllame",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // llame ::= LLAME PARENIZQ ID PARENIZQ PARENDER PARENDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            char comilla = 34;
            RESULT = "instrucciones.add("+comilla+"llame("+i+"());"+comilla+");"+i+"();"; 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llame",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // llame ::= LLAME PARENIZQ ID PARENIZQ paramsllame PARENDER PARENDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            char comilla = 34;
            String[] aux = String.valueOf(p).split("'");
            if(aux.length == 1){
                RESULT = "instrucciones.add("+comilla+"llame("+i+"("+p+"));"+comilla+");"+i+" ("+p+" );";  
            }else{
                RESULT = "instrucciones.add("+comilla+"llame("+i+"("+p+"));"+comilla+");"+i+" ("+aux[0]+comilla+aux[1]+comilla+" );";  
            }
             
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llame",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // escriba ::= ESCRIBA PARENIZQ ID PARENDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                char comilla = 34;
                RESULT = "resultadoConsola.add("+comilla+i+comilla+");instrucciones.add("+comilla+"escriba("+i+");"+comilla+");\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escriba",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // escriba ::= ESCRIBA PARENIZQ ID COMA ID PARENDER 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                char comilla = 34;
                RESULT = "resultadoConsola.add("+i1+"+"+comilla+","+comilla+"+"+i2+");instrucciones.add("+comilla+"escriba("+i1+","+i2+");"+comilla+");\n"; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escriba",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // escriba ::= ESCRIBA PARENIZQ ID COMA MENSAJE PARENDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                String aux = String.valueOf(m);
                aux = aux.substring(1,aux.length()-1);
                char comilla = 34;
                RESULT = "resultadoConsola.add("+i+"+"+comilla+aux+comilla+");instrucciones.add("+comilla+"escriba("+i+","+m+");"+comilla+");\n"; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escriba",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // escriba ::= ESCRIBA PARENIZQ MENSAJE COMA ID PARENDER 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                String aux = String.valueOf(m);
                aux = aux.substring(1,aux.length()-1);
                char comilla = 34;
                RESULT = "resultadoConsola.add("+comilla+aux+comilla+"+"+i+");instrucciones.add("+comilla+"escriba("+m+","+i+");"+comilla+");\n"; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escriba",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // escriba ::= ESCRIBA PARENIZQ MENSAJE PARENDER 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                String aux = String.valueOf(m);
                aux = aux.substring(1,aux.length()-1);
                char comilla = 34;
                RESULT = "resultadoConsola.add("+comilla+aux+comilla+");instrucciones.add("+comilla+"escriba("+m+");"+comilla+");\n"; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escriba",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion ::= ID ASSIGN CERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                char comilla = 34;
                RESULT = id + "=" + c+";instrucciones.add("+comilla+id+"<-"+c+";"+comilla+");";
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= ID ASSIGN llame 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                char comilla = 34;
                RESULT = id + "=" + l+";instrucciones.add("+comilla+id+"<-"+l+";"+comilla+");"; 
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion ::= ID ASSIGN MENSAJE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                char comilla = 34;
                RESULT = id + "="+ comilla + String.valueOf(m).substring(1, String.valueOf(m).length()-1) +comilla+" ;instrucciones.add("+comilla+id+"<-"+m+";"+comilla+");";
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asignacion ::= ID ASSIGN factor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                char comilla = 34;
                RESULT = id + "=" + f+";instrucciones.add("+comilla+id+"<-"+f+";"+comilla+");";
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignacion ::= ID ASSIGN FALSE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                char comilla = 34;
                RESULT = id + "= false;instrucciones.add("+comilla+id+"<-false;"+comilla+");";
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacion ::= ID ASSIGN TRUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                char comilla = 34;
                RESULT = id + "= true;instrucciones.add("+comilla+id+"<-true;"+comilla+");";
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacion ::= ID ASSIGN operacion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                char comilla = 34;
                RESULT = id + "=" + op+";instrucciones.add("+comilla+id+"<-"+op+";"+comilla+");";
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion ::= ID ASSIGN numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                char comilla = 34;
                RESULT = id + "=" + n+";instrucciones.add("+comilla+id+"<-"+n+";"+comilla+");";
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion ::= ID ASSIGN ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                char comilla = 34;
                RESULT = id1 + "=" + id2+";instrucciones.add("+comilla+id1+"<-"+id2+";"+comilla+");";
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // numero ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // numero ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoparametro ::= INOUT 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = in; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoparametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipoparametro ::= OUT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoparametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipoparametro ::= IN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoparametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametro ::= tipoparametro type LLAVEIZQ LLAVEDER ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tp+" "+t+"[] "+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametro ::= tipoparametro variable 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= t +" "+ v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pr +" , "+p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= FLOAT 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= BOOL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacion ::= repita 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion ::= control 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion ::= mientras 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion ::= para 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion ::= llame SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion ::= escriba SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion ::= asignacion SEMI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operaciones ::= operacion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operaciones ::= operaciones operacion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op +" "+o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedimiento ::= PROCEDURE ID PARENIZQ PARENDER DOSP operaciones ENDPROCEDURE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    char comilla = 34;
                    RESULT = "public void "+i+"( ){ instrucciones.add("+comilla+"procedure "+i+"():"+comilla+");"+o+" instrucciones.add("+comilla+"endprocedure"+comilla+");}"; 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedimiento ::= PROCEDURE ID PARENIZQ PARENDER DOSP variables operaciones ENDPROCEDURE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    char comilla = 34;
                    RESULT = "public void "+i+"( ){ instrucciones.add("+comilla+"procedure "+i+"():"+comilla+");"+v+" "+o+" instrucciones.add("+comilla+"endprocedure"+comilla+");}"; 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedimiento ::= PROCEDURE ID PARENIZQ parametros PARENDER DOSP operaciones ENDPROCEDURE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    char comilla = 34;
                    String[] aux = String.valueOf(p).split(" ");
                    int cantV = aux.length / 5;
                    System.out.println("\nVARS: "+(cantV+1));
                    String cabP = "";
                    String cabJ = "";
                    int ap=0;
                    for(int j=0;j<cantV;j++){
                        cabP = cabP +aux[ap] +" "+aux[ap+1] +" "+aux[ap+2].split(";")[0] +aux[ap+4]+" "; 
                        cabJ = cabJ +aux[ap+1] +" "+aux[ap+2].split(";")[0] +aux[ap+4]+" "; 
                        ap+=5;
                    }
                    cabP = cabP +aux[ap] +" "+aux[ap+1] +" "+aux[ap+2].split(";")[0];
                    cabJ = cabJ +aux[ap+1] +" "+aux[ap+2].split(";")[0];
                    System.out.println("\nCAB: "+cabP);
                    String[] aux2 = aux[2].split(";");
                    System.out.println("\nAUX: "+Arrays.toString(aux)+"\n");
                    RESULT = "public void "+i+"("+cabJ+"){instrucciones.add("+comilla+"procedure "+i+"("+cabP+"):"+comilla+");"+o+" instrucciones.add("+comilla+"endprocedure"+comilla+");}"; 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedimiento ::= PROCEDURE ID PARENIZQ parametros PARENDER DOSP variables operaciones ENDPROCEDURE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    char comilla = 34;
                    String[] aux = String.valueOf(p).split(" ");
                    int cantV = aux.length / 5;
                    String cabP = "";
                    String cabJ = "";
                    int ap=0;
                    for(int j=0;j<cantV;j++){
                        cabP = cabP +aux[ap] +" "+aux[ap+1] +" "+aux[ap+2].split(";")[0] +aux[ap+4]+" "; 
                        cabJ = cabJ +aux[ap+1] +" "+aux[ap+2].split(";")[0] +aux[ap+4]+" "; 
                        ap+=5;
                    }
                    cabP = cabP +aux[ap] +" "+aux[ap+1] +" "+aux[ap+2].split(";")[0];
                    cabJ = cabJ +aux[ap+1] +" "+aux[ap+2].split(";")[0];
                    String[] aux2 = aux[2].split(";");
                    RESULT = "public void "+i+"("+cabJ+"){instrucciones.add("+comilla+"procedure "+i+"("+cabP+"):"+comilla+");"+v+" "+o+" instrucciones.add("+comilla+"endprocedure"+comilla+");}"; 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion ::= FUNCTION ID PARENIZQ PARENDER RET type DOSP operaciones retorne ENDFUNCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             char comilla = 34;
             RESULT = "public "+t+" "+i+"( ){instrucciones.add("+comilla+"function "+i+"()->"+t+":"+comilla+");"+o+"instrucciones.add("+comilla+r+";"+comilla+");instrucciones.add("+comilla+"endfunction"+comilla+");"+r+";}\n\n"; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcion ::= FUNCTION ID PARENIZQ PARENDER RET type DOSP variables operaciones retorne ENDFUNCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             char comilla = 34;
             RESULT = "public "+t+" "+i+"( ){instrucciones.add("+comilla+"function "+i+"()->"+t+":"+comilla+");"+v+" "+o+"instrucciones.add("+comilla+r+";"+comilla+");instrucciones.add("+comilla+"endfunction"+comilla+");"+r+";}\n\n"; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion ::= FUNCTION ID PARENIZQ parametros PARENDER RET type DOSP operaciones retorne ENDFUNCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             char comilla = 34;
             String[] aux = String.valueOf(p).split(" ");
             int cantV = aux.length / 5;
             String cabP = "";
             String cabJ = "";
             int ap=0;
             for(int j=0;j<cantV;j++){
                 cabP = cabP +aux[ap] +" "+aux[ap+1] +" "+aux[ap+2].split(";")[0] +aux[ap+4]+" "; 
                 cabJ = cabJ +aux[ap+1] +" "+aux[ap+2].split(";")[0] +aux[ap+4]+" "; 
                 ap+=5;
             }
             cabP = cabP +aux[ap] +" "+aux[ap+1] +" "+aux[ap+2].split(";")[0];
             cabJ = cabJ +aux[ap+1] +" "+aux[ap+2].split(";")[0];
             String[] aux2 = aux[2].split(";");
             RESULT = "public "+t+" "+i+"("+cabJ+"){\n"+o+"instrucciones.add("+comilla+r+";"+comilla+");instrucciones.add("+comilla+"endfunction"+comilla+");"+r+";}\n\n";  
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcion ::= FUNCTION ID PARENIZQ parametros PARENDER RET type DOSP variables operaciones retorne ENDFUNCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "public "+t+" "+i+"("+p+"){\n"+v+" "+o+" "+r+";}\n\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // subprograma ::= procedimiento 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                 //parser.bw.write(String.valueOf(p));
                 RESULT = p; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // subprograma ::= funcion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // subprogramas ::= subprograma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // subprogramas ::= subprogramas subprograma 
            {
              Object RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sp +" "+s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable ::= type LLAVEIZQ NUM LLAVEDER ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                char comilla = 34;
                RESULT = t+"[] "+i+" = new "+t+"["+n+"];instrucciones.add("+comilla+t+"["+n+"] "+i+";"+comilla+");"; 
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                char comilla = 34;
                RESULT = t+" "+i+";instrucciones.add("+comilla+t+" "+i+";"+comilla+");"; 
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables ::= variable SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables ::= variables variable SEMI 
            {
              Object RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vs +" "+v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= MAIN CORCHIZQ variables operaciones CORCHDER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             parser.bw.write("}}");
             parser.CerrarArchivo();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= subprogramas MAIN CORCHIZQ operaciones CORCHDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             parser.bw.write("public void main(){\n");
             parser.bw.write("}}");
             parser.CerrarArchivo();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= subprogramas MAIN CORCHIZQ variables operaciones CORCHDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             JOptionPane.showMessageDialog(null, "Algoritmo bien escrito");
             char comilla = 34;
             parser.bw.write(String.valueOf(s));
             parser.bw.write("public void main(){\n");
             parser.bw.write("instrucciones.add("+comilla+"main{"+comilla+");");
             parser.bw.write(String.valueOf(v));
             parser.bw.write(String.valueOf(o));
             parser.bw.write("instrucciones.add("+comilla+"}"+comilla+");}");
             parser.bw.write("}");
             parser.CerrarArchivo();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= variables subprogramas MAIN CORCHIZQ operaciones CORCHDER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		             
             parser.bw.write("}}");
             parser.CerrarArchivo();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= variables subprogramas MAIN CORCHIZQ variables operaciones CORCHDER 
            {
              Object RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vs2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             parser.bw.write("}}");
             parser.CerrarArchivo();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

