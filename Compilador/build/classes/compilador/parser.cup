
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
package compilador;

/*Imports*/
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import java.util.Arrays;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). 
*/
parser code {:
    
    int cont=0;
    public parser(java_cup.runtime.Scanner s, String nombrePrograma) throws IOException {
        super(s);

        Programa = "/home/jitzo/Documentos/GitHub/Analisis/Ejecucion/src/ejecucion/"+nombrePrograma+".java";
        archivoPrograma = new File(Programa);

        this.bw = new BufferedWriter(new FileWriter(archivoPrograma));
        bw.write("package ejecucion;\n\nimport java.util.LinkedList;\n\npublic class " + nombrePrograma + "{\n\n");
        bw.write("LinkedList<String> instrucciones = new LinkedList();\nLinkedList<String> resultadoConsola = new LinkedList();\n\n");
        //bw.write("public void main(){");
    }

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. 
    */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. 
        */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" en la línea "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", columna "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        JOptionPane.showMessageDialog(null, m, "Error de sintaxis", JOptionPane.ERROR_MESSAGE);
        System.out.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }

    String Programa;
    File archivoPrograma;
    BufferedWriter bw;
    boolean ejecutar = false;
    
    public void CerrarArchivo() throws IOException{
        bw.close();
    }

    //Bandera para saber si el algoritmo está bien escrito
    boolean bienEscrito = false;

    /*Método que indica si el algoritmo fué bien escrito*/
    public void FinAlgoritmo(Object vs, Object s, Object vs2, Object o) throws IOException {
        if (bienEscrito) {
            JOptionPane.showMessageDialog(null, "Algoritmo bien escrito");
            if(vs != null){
                TraducirVariables(String.valueOf(vs),true);
            }
            if(s != null){
                TraducirSubprograma(String.valueOf(s));
            }
            bw.write("LinkedList<String> resultadoConsola = new LinkedList(); LinkedList<String> instrucciones = new LinkedList();");
            //bw.write("public void main(){\n");
            if(vs2 != null){
                TraducirVariables(String.valueOf(vs2),false);
            }
            if(o != null){
                TraducirSubprograma(String.valueOf(o));
            }  
            bw.write("}");//Cierra la main
            bw.write("}");//Cierra la clase
            ejecutar = true;
            CerrarArchivo();
        } else {
            report_error("Algoritmo mal escrito", null);
            System.exit(1);
        }
    }

    /*Método para traducir subprogramas*/
    private void TraducirSubprograma(String s) throws IOException {
        String[] sp = s.split(" ");
        int n = -1;
        for (int i = 0; i < sp.length; i++) {
            if ((sp[i].endsWith("int") || sp[i].endsWith("boolean") || sp[i].endsWith("float") || sp[i].endsWith("String"))
                    && !sp[i].contains("(")) {
                if (!sp[i + 1].contains("(") && !sp[i + 1].endsWith("int") && !sp[i + 1].endsWith("boolean") && !sp[i + 1].endsWith("float") && !sp[i + 1].endsWith("String")) {
                    sp[i + 1] = sp[i + 1] + ";";
                }
            }
            if (sp[i].contains("[")) {
                n = i + 1;
                TraducirVariables(sp[i] + " " + sp[i + 1], false);
            } else {
                if (i != n) {
                    bw.write(" " + sp[i]);
                }
            }

        }
    }

    /*Método para traducir variables*/
    private void TraducirVariables(String v, boolean b) throws IOException {
        String[] vars = v.split(" ");
        String st = "";
        if (b) {
            st = "static ";
        }
        for (int i = 0; i < vars.length; i += 2) {
            if (vars[i].contains("[")) {
                String[] aux = vars[i].split("\\[");
                String n = aux[1].substring(0, aux[1].length() - 1);
                if (!n.equals("")) {
                    switch (aux[0]) {
                        case "int":
                            bw.write(st+"int[] " + vars[i + 1] + "= new int[" + n + "];\n");
                            break;
                        case "float":
                            bw.write(st+"float[] " + vars[i + 1] + "= new float[" + n + "];\n");
                            break;
                        case "boolean":
                            bw.write(st+"boolean[] " + vars[i + 1] + "= new boolean[" + n + "];\n");
                            break;
                        case "String":
                            bw.write(st+"String[] " + vars[i + 1] + "= new String[" + n + "];\n");
                            break;
                    }
                } else {
                    bw.write(v);
                }
            } else {
                bw.write(st + vars[i] + " " + vars[i + 1] + ";\n");
            }
        }
    }

:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */

terminal CORCHIZQ, CORCHDER, SEMI, DOSP, SUMA, RESTA, MULTI, DIVIDE,
         PARENIZQ, PARENDER, ASSIGN, MENOR, MAYOR, DIFERENTE,
         IGUAL, MENORIGUAL, MAYORIGUAL, LLAVEIZQ, LLAVEDER, MAIN, FUNCTION, PROCEDURE, RETURN, 
         FOR, ENDFOR, WHILE, ENDWHILE, IF, ELSE, ENDIF, 
         REPEAT, IN, OUT, INOUT, ESCRIBA, LLAME,
         TO, AND, OR, TRUE, FALSE, COMA, CERO, RET, ENDPROCEDURE, ENDFUNCTION;

terminal Integer NUM;
terminal Float DECIMAL;
terminal String ID, MENSAJE, INT, FLOAT, BOOL, STRING;
   
/* Non terminals used in the grammar section.  

   Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */

non terminal program, variables, variable, subprogramas, subprograma,
             funcion, procedimiento, operaciones, operacion,
             parametros, parametro, tipoparametro, asignacion, escriba,
             llame, para, mientras, condiciones, condicion, 
             oprel, opmath, suma, resta, multiplicacion, division,
             si, sino, repita, retorne, numero, control, factor, paramsllame, 
             paramllame;

non terminal String type;
   

/* -------------Precedence and Associatively of Terminals Section----------- */
   
/*
  Precedence of non terminals could be defined here.  If you do define
  precedence here you won't need to worry about precedence in the
  Grammar Section, i.e. that MULTI should have a higher precedence
  than SUMA.
  
  The precedence defined here would look something like this where the
  lower line always will have higher precedence than the line before it.
*/  
  
precedence left SUMA, RESTA; 
precedence left MULTI, DIVIDE; 
precedence left ASSIGN;



/* ----------------------------Grammar Section-------------------- */

program ::= variables:vs subprogramas:s MAIN CORCHIZQ variables:vs2 operaciones:o CORCHDER 
            {:
             //parser.bienEscrito = true;
             //parser.FinAlgoritmo(vs,s,vs2,o);
             parser.bw.write("}}");
             parser.CerrarArchivo();
            :}
            |
            variables:v subprogramas:s MAIN CORCHIZQ operaciones:o CORCHDER
            {:             
             //parser.bienEscrito = true;
             //parser.FinAlgoritmo(v,s,null,o); 
             parser.bw.write("}}");
             parser.CerrarArchivo();
            :}
            |
            subprogramas:s MAIN CORCHIZQ variables:v operaciones:o CORCHDER
            {: 
             JOptionPane.showMessageDialog(null, "Algoritmo bien escrito");
             char comilla = 34;
             //parser.bienEscrito = true;
             //parser.FinAlgoritmo(null,s,v,o); 
             parser.bw.write(String.valueOf(s));
             parser.bw.write("public void main(){\n");
             parser.bw.write("instrucciones.add("+comilla+"main{"+comilla+");");
             parser.bw.write(String.valueOf(v));
             parser.bw.write(String.valueOf(o));
             //parser.bw.write("}");
             parser.bw.write("instrucciones.add("+comilla+"}"+comilla+");}");
             parser.bw.write("}");
             parser.CerrarArchivo();
            :}
            |
            subprogramas:s MAIN CORCHIZQ operaciones:o CORCHDER
            {: 
             //parser.bienEscrito = true;
             //parser.FinAlgoritmo(null,s,null,o); 
             parser.bw.write("public void main(){\n");
             parser.bw.write("}}");
             parser.CerrarArchivo();
            :}
            |
            MAIN CORCHIZQ variables:v operaciones:o CORCHDER
            {: 
             //parser.bienEscrito = true;
             //parser.FinAlgoritmo(null,null,v,o); 
             parser.bw.write("}}");
             parser.CerrarArchivo();
            :}
            ;

variables ::= variables:vs variable:v SEMI 
              {: RESULT = vs +" "+v; :}
              |
              variable:v SEMI 
              {: RESULT = v; :};

variable ::= type:t ID:i
             {: 
                char comilla = 34;
                //parser.bw.write(t+" "+i+";");
                //parser.bw.write("instrucciones.add("+comilla+t+" "+i+";"+comilla+");");
                RESULT = t+" "+i+";instrucciones.add("+comilla+t+" "+i+";"+comilla+");"; 
             :}             
             | 
             type:t LLAVEIZQ NUM:n LLAVEDER ID:i 
             {: 
                char comilla = 34;
                //parser.bw.write(t+"[] "+i+" = new "+t+"["+n+"];");
                //parser.bw.write("instrucciones.add("+comilla+t+"["+n+"] "+i+";"+comilla+");");
                RESULT = t+"[] "+i+" = new "+t+"["+n+"];instrucciones.add("+comilla+t+"["+n+"] "+i+";"+comilla+");"; 
             :};

subprogramas ::= subprogramas:sp subprograma:s {: RESULT = sp +" "+s; :} | subprograma:s {: RESULT = s; :};

subprograma ::= funcion:f 
                {: RESULT = f; :} 
                | 
                procedimiento:p 
                {: 
                 //parser.bw.write(String.valueOf(p));
                 RESULT = p; 
                :}
                ;

funcion ::= FUNCTION ID:i PARENIZQ parametros:p PARENDER RET type:t DOSP variables:v operaciones:o retorne:r ENDFUNCTION
            {: RESULT = "public static "+t+" "+i+"("+p+"){\n"+v+" "+o+" "+r+";}\n\n"; :}
            |
            FUNCTION ID:i PARENIZQ parametros:p PARENDER RET type:t DOSP operaciones:o retorne:r ENDFUNCTION 
            {: RESULT = "public static "+t+" "+i+"("+p+"){\n"+o+" "+r+";}\n\n"; :}
            |
            FUNCTION ID:i PARENIZQ PARENDER RET type:t DOSP variables:v operaciones:o retorne:r ENDFUNCTION 
            {: RESULT = "public static "+t+" "+i+"( ){\n"+v+" "+o+" "+r+";}\n\n"; :}
            |
            FUNCTION ID:i PARENIZQ PARENDER RET type:t DOSP operaciones:o retorne:r ENDFUNCTION
            {: RESULT = "public static "+t+" "+i+"( ){\n"+o+" "+r+";}\n\n"; :}
            ;

procedimiento ::= PROCEDURE ID:i PARENIZQ parametros:p PARENDER DOSP variables:v operaciones:o ENDPROCEDURE
                  {: 
                    char comilla = 34;
                    String[] aux = String.valueOf(p).split(" ");
                    int cantV = aux.length / 5;
                    System.out.println("\nVARS: "+(cantV+1));
                    String cabP = "";
                    String cabJ = "";
                    int ap=0;
                    for(int j=0;j<cantV;j++){
                        cabP = cabP +aux[ap] +" "+aux[ap+1] +" "+aux[ap+2].split(";")[0] +aux[ap+4]+" "; 
                        cabJ = cabJ +aux[ap+1] +" "+aux[ap+2].split(";")[0] +aux[ap+4]+" "; 
                        ap+=5;
                    }
                    cabP = cabP +aux[ap] +" "+aux[ap+1] +" "+aux[ap+2].split(";")[0];
                    cabJ = cabJ +aux[ap+1] +" "+aux[ap+2].split(";")[0];
                    System.out.println("\nCAB: "+cabP);
                    String[] aux2 = aux[2].split(";");
                    System.out.println("\nAUX: "+Arrays.toString(aux)+"\n");
                    RESULT = "public void "+i+"("+cabJ+"){instrucciones.add("+comilla+"procedure "+i+"("+cabP+"):"+comilla+");"+v+" "+o+" instrucciones.add("+comilla+"endprocedure"+comilla+");}"; 
                  :}
                  |
                  PROCEDURE ID:i PARENIZQ parametros:p PARENDER DOSP operaciones:o ENDPROCEDURE
                  {: 
                    char comilla = 34;
                    String[] aux = String.valueOf(p).split(" ");
                    int cantV = aux.length / 5;
                    System.out.println("\nVARS: "+(cantV+1));
                    String cabP = "";
                    String cabJ = "";
                    int ap=0;
                    for(int j=0;j<cantV;j++){
                        cabP = cabP +aux[ap] +" "+aux[ap+1] +" "+aux[ap+2].split(";")[0] +aux[ap+4]+" "; 
                        cabJ = cabJ +aux[ap+1] +" "+aux[ap+2].split(";")[0] +aux[ap+4]+" "; 
                        ap+=5;
                    }
                    cabP = cabP +aux[ap] +" "+aux[ap+1] +" "+aux[ap+2].split(";")[0];
                    cabJ = cabJ +aux[ap+1] +" "+aux[ap+2].split(";")[0];
                    System.out.println("\nCAB: "+cabP);
                    String[] aux2 = aux[2].split(";");
                    System.out.println("\nAUX: "+Arrays.toString(aux)+"\n");
                    RESULT = "public void "+i+"("+cabJ+"){instrucciones.add("+comilla+"procedure "+i+"("+cabP+"):"+comilla+");"+o+" instrucciones.add("+comilla+"endprocedure"+comilla+");}"; 
                  :}
                  |
                  PROCEDURE ID:i PARENIZQ PARENDER DOSP variables:v operaciones:o ENDPROCEDURE
                  {: 
                    char comilla = 34;
                    RESULT = "public void "+i+"( ){ instrucciones.add("+comilla+"procedure "+i+"():"+comilla+");"+v+" "+o+" instrucciones.add("+comilla+"endprocedure"+comilla+");}"; 
                  :}
                  |
                  PROCEDURE ID:i PARENIZQ PARENDER DOSP operaciones:o ENDPROCEDURE
                  {: 
                    char comilla = 34;
                    RESULT = "public void "+i+"( ){ instrucciones.add("+comilla+"procedure "+i+"():"+comilla+");"+o+" instrucciones.add("+comilla+"endprocedure"+comilla+");}"; 
                  :}
                  ;

operaciones ::= operaciones:op operacion:o {: RESULT = op +" "+o; :} | operacion:o {: RESULT = o; :} ;

operacion ::= asignacion:a SEMI {: RESULT = a; :}
            | 
            escriba:e SEMI {: RESULT = e; :}
            |
            llame:l SEMI {: RESULT = l; :}
            | 
            para:p {: RESULT = p; :}
            |
            mientras:m {: RESULT = m; :}
            |
            control:c {: RESULT = c; :}
            |
            repita:r {: RESULT = r; :}
            ;

type ::= BOOL:b {: RESULT = b; :} | INT:i {: RESULT = i; :} | FLOAT:f {: RESULT = f; :} | STRING:s {: RESULT = s; :};

parametros ::= parametros:pr COMA parametro:p {: RESULT = pr +" , "+p; :} | parametro:p {: RESULT = p; :};

parametro ::= tipoparametro:t variable:v {: RESULT= t +" "+ v; :} 
              | 
              tipoparametro:tp type:t LLAVEIZQ LLAVEDER ID:i {: RESULT = tp+" "+t+"[] "+i; :};

tipoparametro ::= IN:i {: RESULT = i; :} | OUT:o {: RESULT = o; :} | INOUT:in {: RESULT = in; :};

numero ::= NUM:n {:RESULT = n; :}| DECIMAL:d {:RESULT = d; :};

asignacion ::= ID:id1 ASSIGN ID:id2 
               {: 
                char comilla = 34;
                RESULT = id1 + "=" + id2+";instrucciones.add("+comilla+id1+"<-"+id2+";"+comilla+");";
               :}
               |
               ID:id ASSIGN numero:n 
               {: 
                char comilla = 34;
                RESULT = id + "=" + n+";instrucciones.add("+comilla+id+"<-"+n+";"+comilla+");";
               :} 
               |
               ID:id ASSIGN operacion:op 
               {: 
                char comilla = 34;
                RESULT = id + "=" + op+";instrucciones.add("+comilla+id+"<-"+op+";"+comilla+");";
               :}
               |
               ID:id ASSIGN TRUE
               {: 
                char comilla = 34;
                RESULT = id + "= true;instrucciones.add("+comilla+id+"<-true;"+comilla+");";
               :}
               |
               ID:id ASSIGN FALSE
               {: 
                char comilla = 34;
                RESULT = id + "= false;instrucciones.add("+comilla+id+"<-false;"+comilla+");";
               :}
               |
               ID:id ASSIGN factor:f 
               {: 
                char comilla = 34;
                RESULT = id + "=" + f+";instrucciones.add("+comilla+id+"<-"+f+";"+comilla+");";
               :}
               |
               ID:id ASSIGN MENSAJE:m 
               {: 
                char comilla = 34;
                RESULT = id + "="+ comilla + String.valueOf(m).substring(1, String.valueOf(m).length()-1) +comilla+" ;instrucciones.add("+comilla+id+"<-"+m+";"+comilla+");";
               :}
               |
               ID:id ASSIGN llame:l
               {: 
                char comilla = 34;
                RESULT = id + "=" + l+";instrucciones.add("+comilla+id+"<-"+l+";"+comilla+");"; 
               :}
               |
               ID:id ASSIGN CERO:c
               {: 
                char comilla = 34;
                RESULT = id + "=" + c+";instrucciones.add("+comilla+id+"<-"+c+";"+comilla+");";
               :}
               ;

escriba ::= ESCRIBA PARENIZQ MENSAJE:m PARENDER 
            {: 
                String aux = String.valueOf(m);
                aux = aux.substring(1,aux.length()-1);
                char comilla = 34;
                RESULT = "resultadoConsola.add("+comilla+aux+comilla+");instrucciones.add("+comilla+"escriba("+m+");"+comilla+");\n"; 
            :}
            |
            ESCRIBA PARENIZQ MENSAJE:m COMA ID:i PARENDER
            {: 
                String aux = String.valueOf(m);
                aux = aux.substring(1,aux.length()-1);
                char comilla = 34;
                RESULT = "resultadoConsola.add("+comilla+aux+comilla+"+"+i+");instrucciones.add("+comilla+"escriba("+m+","+i+");"+comilla+");\n"; 
            :}
            |
            ESCRIBA PARENIZQ ID:i COMA MENSAJE:m PARENDER 
            {: 
                String aux = String.valueOf(m);
                aux = aux.substring(1,aux.length()-1);
                char comilla = 34;
                RESULT = "resultadoConsola.add("+i+"+"+comilla+aux+comilla+");instrucciones.add("+comilla+"escriba("+i+","+m+");"+comilla+");\n"; 
            :}
            |
            ESCRIBA PARENIZQ ID:i1 COMA ID:i2 PARENDER 
            {: 
                char comilla = 34;
                RESULT = "resultadoConsola.add("+i1+"+"+comilla+","+comilla+"+"+i2+");instrucciones.add("+comilla+"escriba("+i1+","+i2+");"+comilla+");\n"; 
            :}
            |
            ESCRIBA PARENIZQ ID:i PARENDER 
            {: 
                char comilla = 34;
                RESULT = "resultadoConsola.add("+comilla+i+comilla+");instrucciones.add("+comilla+"escriba("+i+");"+comilla+");\n";
            :}
            ;

llame ::= LLAME PARENIZQ ID:i PARENIZQ paramsllame:p PARENDER PARENDER 
          {:
            char comilla = 34;
            String[] aux = String.valueOf(p).split("'");
            System.out.println("AUXXXX: "+Arrays.toString(aux));
            System.out.println("\nPARAMSSSS: "+String.valueOf(p));
            //System.out.println("\nPARAMS: "+Arrays.toString(aux.length));
            if(aux.length == 1){
                RESULT = "instrucciones.add("+comilla+"llame("+i+"("+p+"));"+comilla+");"+i+" ("+p+" );";  
            }else{
                RESULT = "instrucciones.add("+comilla+"llame("+i+"("+p+"));"+comilla+");"+i+" ("+aux[0]+comilla+aux[1]+comilla+" );";  
            }
             
          :}
          |
          LLAME PARENIZQ ID:i PARENIZQ PARENDER PARENDER 
          {:
            char comilla = 34;
            RESULT = "instrucciones.add("+comilla+"llame("+i+"());"+comilla+");"+i+"();"; 
          :}
          ;

paramsllame ::= paramsllame:ps COMA paramllame:p {: RESULT=ps+", "+p; :} | paramllame:p {: RESULT=p; :};

paramllame ::= numero:n {: RESULT=n; :} 
            | ID:i {: RESULT=i; :} 
            | TRUE {: RESULT="true"; :} 
            | FALSE {: RESULT="false"; :} 
            | MENSAJE:m {: char comilla = 34;  RESULT= m; :};

para ::= FOR asignacion:a TO NUM:n DOSP operaciones:o ENDFOR
         {: 
            String[] var = String.valueOf(a).split("=");
            System.out.println(var[1]);
            String[] val = var[1].split(";");
            char comilla = 34;
            RESULT = "for( "+var[0].trim()+"="+val[0].trim()+" ; "+var[0].trim()+" <= "+n+" ; "+var[0].trim()+" ++){ instrucciones.add("+comilla+"for "+var[0].trim()+"<-"+val[0].trim()+" to "+n+":"+comilla+");"+o+" }"; 
         :}
         |
         FOR asignacion:a TO ID:i DOSP operaciones:o ENDFOR
         {: 
            String[] var = String.valueOf(a).split("=");
            System.out.println(var[1]);
            String[] val = var[1].split(";");
            char comilla = 34;
            //instrucciones.add("+comilla+"for "+var[0].trim()+"<-"+val[0].trim()+" to "+i+":"+comilla+");
            RESULT = "for( "+var[0].trim()+"="+val[0].trim()+" ; "+var[0].trim()+" <= "+i+" ; "+var[0].trim()+" ++){ instrucciones.add("+comilla+"for "+var[0].trim()+"<-"+val[0].trim()+" to "+i+":"+comilla+");"+o+" }instrucciones.add("+comilla+"for "+var[0].trim()+"<-"+val[0].trim()+" to "+i+":"+comilla+");instrucciones.add("+comilla+"endfor"+comilla+");"; 
         :}
         ;

mientras ::= WHILE PARENIZQ condiciones:c PARENDER DOSP operaciones:o ENDWHILE
             {: RESULT = "while( "+c+" ){"+o+" }"; :}
             ;

condiciones ::= condiciones:cs AND condicion:c {: RESULT= cs+" && "+c; :}
                |
                condiciones:cs OR condicion:c {: RESULT= cs+" || "+c; :}
                |
                condicion:c {: RESULT=c; :}
                ;

condicion ::= ID:i1 oprel:o ID:i2 {: RESULT = i1+" "+o+" "+i2; :}
              |
              ID:i oprel:o numero:n {: RESULT = i+" "+o+" "+n; :}
              |
              numero:n oprel:o ID:i {: RESULT = n+" "+o+" "+i; :}
              |
              ID:i oprel:o opmath:om {: RESULT = i+" "+o+" "+om; :}
              |
              opmath:om oprel:o ID:i {: RESULT = om+" "+o+" "+i; :}
              |
              numero:n oprel:o opmath:om {: RESULT = n+" "+o+" "+om; :}
              |
              opmath:om oprel:o numero:n {: RESULT = om+" "+o+" "+n; :}
              |
              opmath:om1 oprel:o opmath:om2 {: RESULT = om1+" "+o+" "+om2; :}
              |
              TRUE {: RESULT="true"; :}
              |
              FALSE {: RESULT="false"; :}
              ;

factor ::= PARENIZQ numero:n PARENDER {: RESULT = "("+n+")"; :} | PARENIZQ opmath:o PARENDER {: RESULT = "("+o+")"; :};

oprel ::= MENOR {: RESULT = "<"; :} | MAYOR {: RESULT = ">"; :} 
          | 
          MENORIGUAL {: RESULT = "<="; :} | MAYORIGUAL {: RESULT = ">="; :} 
          | 
          DIFERENTE {: RESULT = "!="; :} | IGUAL {: RESULT = "=="; :};

opmath ::= suma:s {: RESULT = s; :} | resta:r {: RESULT = r; :} 
           |
           multiplicacion:m {: RESULT = m; :} | division:d {: RESULT = d; :};

suma ::= numero:n1 SUMA numero:n2 {: RESULT= n1+" + "+n2; :} 
         |
         numero:n SUMA ID:i {: RESULT= n+" + "+i; :} 
         |
         ID:i SUMA numero:n {: RESULT= i+" + "+n; :} 
         |
         ID:i1 SUMA ID:i2 {: RESULT= i1+" + "+i2; :} 
         ;

resta ::= numero:n1 RESTA numero:n2 {: RESULT= n1+" - "+n2; :}
         |
         numero:n RESTA ID:i {: RESULT= n+" - "+i; :} 
         |
         ID:i RESTA numero:n {: RESULT= i+" - "+n; :} 
         |
         ID:i1 RESTA ID:i2 {: RESULT= i1+" - "+i2; :}
         ;

multiplicacion ::= numero:n1 MULTI numero:n2 {: RESULT= n1+" * "+n2; :}
         |
         numero:n MULTI ID:i {: RESULT= n+" * "+i; :}
         |
         ID:i MULTI numero:n {: RESULT= i+" * "+n; :} 
         |
         ID:i1 MULTI ID:i2 {: RESULT= i1+" * "+i2; :}
         ;

division ::= numero:n1 DIVIDE numero:n2 {: RESULT= n1+" / "+n2; :}
         |
         numero:n DIVIDE ID:i {: RESULT= n+" / "+i; :}
         |
         ID:i DIVIDE numero:n {: RESULT= i+" / "+n; :}
         |
         ID:i1 DIVIDE ID:i2 {: RESULT= i1+" / "+i2; :}
         ;

control ::= si:s {: RESULT=s; :} | sino:sn {: RESULT=sn; :};

si ::= IF PARENIZQ condiciones:c PARENDER DOSP operaciones:o ENDIF {: RESULT="if( "+c+" ){ "+o+" }"; :};

sino ::= IF PARENIZQ condiciones:c PARENDER DOSP operaciones:op1 ELSE operaciones:op2 ENDIF
         {: RESULT="if( "+c+" ){ "+op1+" }else{ "+op2+" }"; :};

repita ::= REPEAT DOSP operaciones:o WHILE PARENIZQ condiciones:c PARENDER SEMI 
           {: RESULT = "do{ "+o+" }while( "+c+" );"; :};

retorne ::= RETURN:r ID:i SEMI 
            {: RESULT = r+" "+i; :} 
            | 
            RETURN:r numero:n SEMI 
            {: RESULT = r+" "+n; :} 
            |
            RETURN:r MENSAJE:m SEMI 
            {: String str = String.valueOf(m); 
               char comilla = 34;
               RESULT = r+" "+comilla +str.substring(1,str.length()-1)+comilla;
            :} ;